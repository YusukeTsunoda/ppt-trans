#!/usr/bin/env node

/**
 * Supabase„Åß„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 */

const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  process.exit(1);
}

// Supabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà‰ΩúÊàêÔºà„Çµ„Éº„Éì„Çπ„É≠„Éº„É´„Ç≠„Éº„Çí‰ΩøÁî®Ôºâ
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function createTestUsers() {
  console.log('üöÄ „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê„ÇíÈñãÂßã„Åó„Åæ„Åô...');

  const testUsers = [
    {
      email: 'admin@example.com',
      password: 'Admin123!',
      username: 'admin',
      role: 'ADMIN'
    },
    {
      email: 'user1@example.com',
      password: 'User123!',
      username: 'testuser1',
      role: 'USER'
    },
    {
      email: 'user2@example.com',
      password: 'User456!',
      username: 'testuser2',
      role: 'USER'
    }
  ];

  for (const userData of testUsers) {
    try {
      // Supabase Auth„Åß„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
      const { data: authData, error: authError } = await supabase.auth.admin.createUser({
        email: userData.email,
        password: userData.password,
        email_confirm: true,
        user_metadata: {
          username: userData.username,
          role: userData.role
        }
      });

      if (authError) {
        console.error(`‚ùå Auth „Ç®„É©„Éº (${userData.email}):`, authError.message);
        continue;
      }

      // profiles„ÉÜ„Éº„Éñ„É´„Å´„ÇÇ„É¨„Ç≥„Éº„Éâ„Çí‰ΩúÊàê
      const { error: dbError } = await supabase
        .from('profiles')
        .upsert({
          id: authData.user.id,
          username: userData.username,
          full_name: userData.username,
          role: userData.role,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'id'
        });

      if (dbError) {
        console.error(`‚ùå „Éá„Éº„Çø„Éô„Éº„Çπ„Ç®„É©„Éº (${userData.email}):`, dbError.message);
        console.error('Ë©≥Á¥∞:', dbError);
      } else {
        console.log(`‚úÖ „É¶„Éº„Ç∂„Éº‰ΩúÊàêÊàêÂäü: ${userData.email} (${userData.role})`);
      }
    } catch (error) {
      console.error(`‚ùå „Ç®„É©„Éº (${userData.email}):`, error);
    }
  }

  console.log('\nüìù „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±:');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  testUsers.forEach(user => {
    console.log(`üìß ${user.email}`);
    console.log(`üîê ${user.password}`);
    console.log(`üë§ ${user.username} (${user.role})`);
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  });
}

// ÂÆüË°å
createTestUsers()
  .then(() => {
    console.log('\n‚ú® „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  });