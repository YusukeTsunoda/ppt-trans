#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// Local Supabase credentials
const supabaseUrl = 'http://127.0.0.1:54321';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Users to create
const users = [
  {
    email: 'test@example.com',
    password: 'testpassword123',
    role: 'user',
    full_name: 'Test User',
    username: 'testuser'
  },
  {
    email: 'admin@example.com',
    password: 'adminpassword123',
    role: 'admin',
    full_name: 'Admin User',
    username: 'admin'
  }
];

async function resetDatabase() {
  console.log('üîÑ „Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çª„ÉÉ„Éà‰∏≠...\n');
  
  try {
    // Reset database
    const { stdout, stderr } = await execAsync('npx supabase db reset --local');
    if (stderr && !stderr.includes('warning')) {
      console.error('Reset error:', stderr);
    }
    console.log('‚úÖ „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆ„É™„Çª„ÉÉ„ÉàÂÆå‰∫Ü');
    
    // Wait a bit for the database to be ready
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    return true;
  } catch (error) {
    console.error('‚ùå „Éá„Éº„Çø„Éô„Éº„Çπ„É™„Çª„ÉÉ„Éà„Ç®„É©„Éº:', error.message);
    return false;
  }
}

async function createUser(userData) {
  try {
    console.log(`\nüë§ ${userData.email} „Çí‰ΩúÊàê‰∏≠...`);
    
    // Delete existing user if any
    const { data: existingUsers } = await supabase.auth.admin.listUsers();
    const existingUser = existingUsers?.users?.find(u => u.email === userData.email);
    
    if (existingUser) {
      console.log('  Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„ÇíÂâäÈô§‰∏≠...');
      await supabase.auth.admin.deleteUser(existingUser.id);
    }
    
    // Create new user
    const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
      email: userData.email,
      password: userData.password,
      email_confirm: true,
      user_metadata: {
        role: userData.role,
        full_name: userData.full_name,
        username: userData.username
      }
    });
    
    if (createError) {
      throw createError;
    }
    
    console.log('  ‚úÖ „É¶„Éº„Ç∂„Éº‰ΩúÊàêÊàêÂäü');
    
    // Create profile
    if (newUser?.user) {
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: newUser.user.id,
          username: userData.username,
          full_name: userData.full_name,
          role: userData.role
        });
      
      if (profileError) {
        console.log('  ‚ö†Ô∏è „Éó„É≠„Éï„Ç£„Éº„É´‰ΩúÊàê„Ç®„É©„Éº:', profileError.message);
      } else {
        console.log('  ‚úÖ „Éó„É≠„Éï„Ç£„Éº„É´‰ΩúÊàêÊàêÂäü');
      }
    }
    
    return newUser;
  } catch (error) {
    console.error(`  ‚ùå „Ç®„É©„Éº: ${error.message}`);
    return null;
  }
}

async function testLogin(email, password) {
  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password
  });
  
  if (error) {
    return { success: false, error: error.message };
  }
  
  await supabase.auth.signOut();
  return { success: true, user: data.user };
}

async function main() {
  console.log('=====================================================');
  console.log('PowerPoint Translation Tool - ÈñãÁô∫Áí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó');
  console.log('=====================================================\n');
  
  // Step 1: Reset database
  console.log('„Çπ„ÉÜ„ÉÉ„Éó 1: „Éá„Éº„Çø„Éô„Éº„Çπ„É™„Çª„ÉÉ„Éà');
  console.log('-------------------------------------');
  const resetSuccess = await resetDatabase();
  
  if (!resetSuccess) {
    console.log('\n‚ö†Ô∏è „Éá„Éº„Çø„Éô„Éº„Çπ„É™„Çª„ÉÉ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶Á∂öË°å„Åó„Åæ„Åô...\n');
  }
  
  // Step 2: Create users
  console.log('\n„Çπ„ÉÜ„ÉÉ„Éó 2: „É¶„Éº„Ç∂„Éº‰ΩúÊàê');
  console.log('-------------------------------------');
  
  for (const userData of users) {
    await createUser(userData);
  }
  
  // Step 3: Test login
  console.log('\n„Çπ„ÉÜ„ÉÉ„Éó 3: „É≠„Ç∞„Ç§„É≥„ÉÜ„Çπ„Éà');
  console.log('-------------------------------------');
  
  for (const userData of users) {
    console.log(`\nüîê ${userData.email} „Åß„É≠„Ç∞„Ç§„É≥„ÉÜ„Çπ„Éà...`);
    const result = await testLogin(userData.email, userData.password);
    
    if (result.success) {
      console.log('  ‚úÖ „É≠„Ç∞„Ç§„É≥ÊàêÂäü');
    } else {
      console.log(`  ‚ùå „É≠„Ç∞„Ç§„É≥Â§±Êïó: ${result.error}`);
    }
  }
  
  // Summary
  console.log('\n=====================================================');
  console.log('„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫ÜÔºÅ');
  console.log('=====================================================\n');
  console.log('üìù „É≠„Ç∞„Ç§„É≥ÊÉÖÂ†±:');
  console.log('-------------------------------------');
  console.log('„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº:');
  console.log('  Email: test@example.com');
  console.log('  Password: testpassword123');
  console.log('\nÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº:');
  console.log('  Email: admin@example.com');
  console.log('  Password: adminpassword123');
  console.log('-------------------------------------');
  console.log('\nüåê „É≠„Ç∞„Ç§„É≥„Éö„Éº„Ç∏: http://localhost:3001/login');
  console.log('üìä Supabase Studio: http://localhost:54323');
  console.log('\n‚ú® ÈñãÁô∫„ÇíÈñãÂßã„Åß„Åç„Åæ„ÅôÔºÅ');
}

main().then(() => {
  process.exit(0);
}).catch((error) => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});