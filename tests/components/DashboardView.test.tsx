import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import DashboardView from '@/components/dashboard/DashboardView';
import { translateFileAction, deleteFileAction } from '@/app/actions/dashboard';
import { logoutAction } from '@/app/actions/auth';

// „É¢„ÉÉ„ÇØ
jest.mock('@/app/actions/dashboard');
jest.mock('@/app/actions/auth');
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: jest.fn(),
  }),
}));
jest.mock('@/lib/supabase/client', () => ({
  createClient: () => ({
    auth: {
      getUser: jest.fn().mockResolvedValue({
        data: { user: { id: 'test-user-id' } },
        error: null,
      }),
    },
    storage: {
      from: () => ({
        download: jest.fn().mockResolvedValue({
          data: new Blob(['test']),
          error: null,
        }),
      }),
    },
    from: () => ({
      select: () => ({
        eq: () => ({
          single: jest.fn().mockResolvedValue({
            data: { role: 'user' },
            error: null,
          }),
        }),
      }),
    }),
  }),
}));

describe('DashboardView', () => {
  const mockFiles = [
    {
      id: '1',
      filename: 'test.pptx',
      original_name: 'test.pptx',
      file_size: 1024000,
      status: 'uploaded',
      created_at: '2024-01-01T00:00:00Z',
    },
    {
      id: '2',
      filename: 'completed.pptx',
      original_name: 'completed.pptx',
      file_size: 2048000,
      status: 'completed',
      translation_result: {
        translated_path: 'translated/completed.pptx',
        slide_count: 10,
      },
      created_at: '2024-01-02T00:00:00Z',
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã', async () => {
    render(
      <DashboardView userEmail="test@example.com" initialFiles={mockFiles} />
    );

    await waitFor(() => {
      expect(screen.getByTestId('file-list')).toBeInTheDocument();
    });

    // „Éï„Ç°„Ç§„É´Âêç„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    expect(screen.getByText('test.pptx')).toBeInTheDocument();
    expect(screen.getByText('completed.pptx')).toBeInTheDocument();
  });

  it('Á©∫„ÅÆ„Éï„Ç°„Ç§„É´„É™„Çπ„Éà„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã', () => {
    render(
      <DashboardView userEmail="test@example.com" initialFiles={[]} />
    );

    expect(screen.getByTestId('empty-file-list')).toBeInTheDocument();
    expect(screen.getByText('„Åæ„Å†„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')).toBeInTheDocument();
  });

  it('ÁøªË®≥„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
    const mockTranslateAction = jest.fn().mockResolvedValue({
      success: true,
    });
    (translateFileAction as jest.Mock).mockImplementation(mockTranslateAction);

    render(
      <DashboardView userEmail="test@example.com" initialFiles={mockFiles} />
    );

    // ÁøªË®≥„Éú„Çø„É≥„ÇíË¶ã„Å§„Åë„Å¶„ÇØ„É™„ÉÉ„ÇØ
    const translateButtons = screen.getAllByText('üåê ÁøªË®≥');
    await userEvent.click(translateButtons[0]);

    await waitFor(() => {
      expect(mockTranslateAction).toHaveBeenCalledWith('1');
    });
  });

  it('„Éï„Ç°„Ç§„É´ÂâäÈô§Ê©üËÉΩ„ÅåÂãï‰Ωú„Åô„Çã', async () => {
    const mockDeleteAction = jest.fn().mockResolvedValue({
      success: true,
    });
    (deleteFileAction as jest.Mock).mockImplementation(mockDeleteAction);

    // window.confirm„Çí„É¢„ÉÉ„ÇØ
    global.confirm = jest.fn(() => true);

    render(
      <DashboardView userEmail="test@example.com" initialFiles={mockFiles} />
    );

    // ÂâäÈô§„Éú„Çø„É≥„ÇíË¶ã„Å§„Åë„Å¶„ÇØ„É™„ÉÉ„ÇØ
    const deleteButtons = screen.getAllByText('ÂâäÈô§');
    await userEvent.click(deleteButtons[0]);

    await waitFor(() => {
      expect(mockDeleteAction).toHaveBeenCalledWith('1');
    });
  });

  it('„É≠„Ç∞„Ç¢„Ç¶„Éà„Éú„Çø„É≥„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', async () => {
    const mockLogoutAction = jest.fn().mockResolvedValue({
      success: true,
    });
    (logoutAction as jest.Mock).mockImplementation(mockLogoutAction);

    render(
      <DashboardView userEmail="test@example.com" initialFiles={mockFiles} />
    );

    // „É≠„Ç∞„Ç¢„Ç¶„Éà„Éú„Çø„É≥„ÇíË¶ã„Å§„Åë„Å¶„ÇØ„É™„ÉÉ„ÇØ
    const logoutButton = screen.getByText('„É≠„Ç∞„Ç¢„Ç¶„Éà');
    await userEvent.click(logoutButton);

    await waitFor(() => {
      expect(mockLogoutAction).toHaveBeenCalled();
    });
  });

  it('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÇíÊ≠£„Åó„Åè„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åô„Çã', () => {
    render(
      <DashboardView userEmail="test@example.com" initialFiles={mockFiles} />
    );

    // 1024000 bytes = 1000.0 KB
    expect(screen.getByText('1000.0 KB')).toBeInTheDocument();
    // 2048000 bytes = 2.0 MB
    expect(screen.getByText('2.0 MB')).toBeInTheDocument();
  });

  it('„Çπ„ÉÜ„Éº„Çø„Çπ„Éê„ÉÉ„Ç∏„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã', () => {
    render(
      <DashboardView userEmail="test@example.com" initialFiles={mockFiles} />
    );

    expect(screen.getByText('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊ∏à„Åø')).toBeInTheDocument();
    expect(screen.getByText('ÂÆå‰∫Ü')).toBeInTheDocument();
  });
});